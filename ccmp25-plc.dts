/*
 * Device tree generated automatically by Digi ConnectCore Smart IOmux.
 *
 * This file is provided "AS IS" without any warranties and support, it is
 * just a guideline that requires additional customization.
 *
 * Please verify the calculated pin assignments with the hardware reference
 * manual for your platform, review the commented lines, and add the
 * specific values for your hardware.
 */

/dts-v1/;

/* STM32MP25 CPU */
#include "../st/stm32mp257.dtsi"
#include "../st/stm32mp25xf.dtsi"
#include "../st/stm32mp25-pinctrl.dtsi"
#include "../st/stm32mp25xxai-pinctrl.dtsi"

/* Digi ConnectCore MP25 (SOM) */
#include "ccmp25.dtsi"

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/leds/common.h>
#include <dt-bindings/regulator/st,stm32mp25-regulator.h>
#include "dt-bindings/pwm/pwm.h"

/ {
	// Add here your platform model.
	model = "ConnectCore MP255";
	// Add here your compatible platform.
	compatible = "digi,ccmp25-dvk", "digi,ccmp25", "st,stm32mp257";
};

&combophy {
	status = "okay";
	/* Uncomment if USB3 is configured. Conflicts with PCIE. */
	//st,ssc-on;
};

&eth1 {
	/* USER CODE BEGIN ethernet (mdio) */
	mdio1 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		/*
		 * Reference block.
		 *
		 * Add your custom PHY, reset and interrupts
		 * configuration.
		 */
		phy1_eth1: ethernet-phy@4 {
		//	compatible = "ethernet-phy-id0141.0dd0"; /* PHY ID for Marvell 88E1512 */
		//	reset-gpios =  <&gpiob 3 GPIO_ACTIVE_LOW>; /* ETH1_RST */
		//	reset-assert-us = <1000>;
		//	reset-deassert-us = <2000>;
		//	reg = <4>;
		};

		/*
		 * This is a reference block to add an additional
		 * Ethernet interface to the same MDIO bus.
		 */
		//phy2_eth1: ethernet-phy@5 {
		//	compatible = "ethernet-phy-id0141.0dd0"; /* PHY ID for Marvell 88E1512 */
		//	reset-gpios =  <&gpiob 15 GPIO_ACTIVE_LOW>; /* ETHN_RST */
		//	reset-assert-us = <1000>;
		//	reset-deassert-us = <2000>;
		//	reg = <5>;
		//};
	};
	/* USER CODE END ethernet (mdio) */
	status = "okay";

	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_ethernet1_pins>;
	pinctrl-1 = <&ccmp25_ethernet1_sleep_pins>;

	/* USER CODE BEGIN ethernet1 */
	phy-mode = "rgmii";

	//max-speed = <100>;               // Only for rmii
	//max-speed = <1000>;              // Only for rgmii
	//st,eth-ref-clk-sel;              // Only for rmii
	//st,ext-phyclk;                   // Only for rmii
	//st,eth-ptp-from-rcc;             // Set when PTP (IEEE1588) clock selection is from RCC
	//snps,ext-systime;                // Set when HW sync (using an HW bus between the GMac and the switch)
	//phy-supply = <&reg_3v3_eth_pwr>; // Set the appropriate PHY power
	//phy-handle = <&phy1_eth1>;       // Set the appropriate PHY handler

	///* Set a fixed speed. */
	//fixed_link: fixed-link {
	//	speed = <100>;              // Only for rmii
	//	speed = <1000>;             // Only for rgmii
	//	full-duplex;
	//};
	/* USER CODE END ethernet1 */
};

&eth2 {
	/* USER CODE BEGIN ethernet (mdio) */
	mdio1 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		/*
		 * Reference block.
		 *
		 * Add your custom PHY, reset and interrupts
		 * configuration.
		 */
		phy1_eth2: ethernet-phy@4 {
		//	compatible = "ethernet-phy-id0141.0dd0"; /* PHY ID for Marvell 88E1512 */
		//	reset-gpios =  <&gpiob 3 GPIO_ACTIVE_LOW>; /* ETH1_RST */
		//	reset-assert-us = <1000>;
		//	reset-deassert-us = <2000>;
		//	reg = <4>;
		};

		/*
		 * This is a reference block to add an additional
		 * Ethernet interface to the same MDIO bus.
		 */
		//phy2_eth2: ethernet-phy@5 {
		//	compatible = "ethernet-phy-id0141.0dd0"; /* PHY ID for Marvell 88E1512 */
		//	reset-gpios =  <&gpiob 15 GPIO_ACTIVE_LOW>; /* ETHN_RST */
		//	reset-assert-us = <1000>;
		//	reset-deassert-us = <2000>;
		//	reg = <5>;
		//};
	};
	/* USER CODE END ethernet (mdio) */
	status = "okay";

	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_ethernet2_pins>;
	pinctrl-1 = <&ccmp25_ethernet2_sleep_pins>;

	/* USER CODE BEGIN ethernet2 */
	phy-mode = "rgmii-id";

	//max-speed = <100>;               // Only for rmii
	//max-speed = <1000>;              // Only for rgmii
	//st,eth-ref-clk-sel;              // Only for rmii
	//st,ext-phyclk;                   // Only for rmii
	//st,eth-ptp-from-rcc;             // Set when PTP (IEEE1588) clock selection is from RCC
	//snps,ext-systime;                // Set when HW sync (using an HW bus between the GMac and the switch)
	//phy-supply = <&reg_3v3_eth_pwr>; // Set the appropriate PHY power
	//phy-handle = <&phy1_eth1>;       // Set the appropriate PHY handler

	///* Set a fixed speed. */
	//fixed_link: fixed-link {
	//	speed = <100>;              // Only for rmii
	//	speed = <1000>;             // Only for rgmii
	//	full-duplex;
	//};
	/* USER CODE END ethernet2 */
};

&i2c1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_i2c1_pins>;
	pinctrl-1 = <&ccmp25_i2c1_sleep_pins>;
	status = "okay";

	/* USER CODE BEGIN i2c1 */
	/delete-property/dmas;
	/delete-property/dma-names;

	//clock-frequency = <400000>;
	//i2c-scl-rising-time-ns = <185>;
	//i2c-scl-falling-time-ns = <20>;
};

&i2c2 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_i2c2_pins>;
	pinctrl-1 = <&ccmp25_i2c2_sleep_pins>;
	status = "okay";

	/* USER CODE BEGIN i2c2 */
	/delete-property/dmas;
	/delete-property/dma-names;

	//clock-frequency = <400000>;
	//i2c-scl-rising-time-ns = <185>;
	//i2c-scl-falling-time-ns = <20>;
	/* USER CODE BEGIN usb3dr - i2c2 */
	/*
	 * Reference block.
	 *
	 * Configure the USB-C driver and endpoint.
	 */
	//typec@35 {
	//	compatible = "st,stm32mp25-typec";
	//	reg = <0x35>;
	//	interrupts-extended = <&intc_rpmsg 0>;
	//	status = "okay";
	//	connector {
	//		compatible = "usb-c-connector";
	//		label = "USB-C";
	//		
	//		port {
	//			typec_ep: endpoint {
	//				remote-endpoint = <&dwc3_ep>;
	//			};
	//		};
	//	};
	//};
	/* USER CODE END usb3dr - i2c2 */
};

&lptimer3 {
	status = "okay";

	/* USER CODE BEGIN lptimer3 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END lptimer3 */

	/* Set the desired PWM name */
	pwm4: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_lptimer3_ch1_pwm_z_pins>;
		pinctrl-1 = <&ccmp25_lptimer3_ch1_pwm_z_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN lptimer3 */
	/* USER CODE END lptimer3 */

	/* Set the desired PWM name */
	pwm5: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_lptimer3_ch2_pwm_z_pins>;
		pinctrl-1 = <&ccmp25_lptimer3_ch2_pwm_z_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};
};

&m_can1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_can1_pins>;
	pinctrl-1 = <&ccmp25_can1_sleep_pins>;
	status = "okay";
};

&sdmmc3 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_sdmmc3_pins>;
	pinctrl-1 = <&ccmp25_sdmmc3_sleep_pins>;
	status = "okay";
	
	/* USER CODE BEGIN sdmmc3 */
	bus-width = <4>;
	//cd-gpios = <&gpioi 6 GPIO_ACTIVE_HIGH>;
	//disable-wp;
	//st,neg-edge;
	//no-1-8-v;
	//vmmc-supply = <&reg_3v3_board>; /* card's VDD pin */
	//vqmmc-supply = <&scmi_vddio3>;
	/* USER CODE BEGIN sdmmc3 */
};

&spi3 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_spi3_pins>;
	pinctrl-1 = <&ccmp25_spi3_sleep_pins>;
	status = "okay";
	
	/* USER CODE BEGIN spi3 */
	//cs-gpios = <&gpiob 1 0>;
	
	/*
	 * Reference block.
	 * 
	 * Configure your SPI peripherals.
	 */
	//st33htpm0: st33htpm@0{
	//	compatible = "st,st33htpm-spi";
	//	reg = <0>;
	//	spi-max-frequency = <33000000>;
	//	status = "okay";
	//};
	//spidev@0{
	//	compatible = "spidev";
	//	reg = <0>;
	//	spi-max-frequency = <4000000>;
	//	status = "okay";
	//};
	/* USER CODE END spi3 */
};

&timers1 {
	status = "okay";

	/* USER CODE BEGIN timers1 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END timers1 */

	
	counter_DI_1_2:  {                                          /* remove pwm10,pwm11 and add this */
      	pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers1_ch3_4_pins>;
		pinctrl-1 = <&ccmp25_timers1_ch3_4_sleep_pins>;
		status = "okay";
    };



	/* Set the desired PWM name */
	pwm8: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers1_ch1_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers1_ch1_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers1 */
	/* USER CODE END timers1 */

	/* Set the desired PWM name */
	pwm9: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers1_ch2_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers1_ch2_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};
};

&timers2 {
	status = "okay";

	/* USER CODE BEGIN timers2 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END timers2 */

	counter_DI_3_4:  {                                          /* remove pwm10,pwm11 and add this */
      	pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers2_ch3_4_pins>;
		pinctrl-1 = <&ccmp25_timers2_ch3_4_sleep_pins>;
		status = "okay";
    };

	/* Set the desired PWM name */
	pwm12: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers2_ch1_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers2_ch1_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers2 */
	/* USER CODE END timers2 */

	/* Set the desired PWM name */
	pwm13: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers2_ch2_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers2_ch2_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};
};

&timers20 {
	status = "okay";

	/* USER CODE BEGIN timers20 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END timers20 */

	/* Set the desired PWM name */
	pwm45: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers20_ch4_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers20_ch4_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};
};

&timers3 {
	status = "okay";

	/* USER CODE BEGIN timers3 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END timers3 */

	/* Set the desired PWM name */
	pwm18: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers3_ch3_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers3_ch3_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers3 */
	/* USER CODE END timers3 */

	/* Set the desired PWM name */
	pwm19: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers3_ch4_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers3_ch4_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};
};

&timers4 {
	status = "okay";

	/* USER CODE BEGIN timers4 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END timers4 */

	/* Set the desired PWM name */
	pwm22: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers4_ch3_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers4_ch3_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers4 */
	/* USER CODE END timers4 */

	/* Set the desired PWM name */
	pwm23: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers4_ch4_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers4_ch4_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers4 */
	/* USER CODE END timers4 */

	/* Set the desired PWM name */
	pwm20: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers4_ch1_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers4_ch1_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers4 */
	/* USER CODE END timers4 */

	/* Set the desired PWM name */
	pwm21: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers4_ch2_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers4_ch2_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};
};

&timers5 {
	status = "okay";

	/* USER CODE BEGIN timers5 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END timers5 */

	/* Set the desired PWM name */
	pwm26: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers5_ch3_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers5_ch3_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers5 */
	/* USER CODE END timers5 */

	/* Set the desired PWM name */
	pwm27: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers5_ch4_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers5_ch4_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers5 */
	/* USER CODE END timers5 */

	/* Set the desired PWM name */
	pwm24: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers5_ch1_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers5_ch1_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers5 */
	/* USER CODE END timers5 */

	/* Set the desired PWM name */
	pwm25: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers5_ch2_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers5_ch2_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};
};

&timers8 {
	status = "okay";

	/* USER CODE BEGIN timers8 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END timers8 */

	/* Set the desired PWM name */
	pwm30: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers8_ch3_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers8_ch3_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers8 */
	/* USER CODE END timers8 */

	/* Set the desired PWM name */
	pwm28: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers8_ch1_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers8_ch1_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/* USER CODE BEGIN timers8 */
	/* USER CODE END timers8 */

	/* Set the desired PWM name */
	pwm29: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ccmp25_timers8_ch2_pwm_pins>;
		pinctrl-1 = <&ccmp25_timers8_ch2_pwm_sleep_pins>;
		status = "okay";
	};

	/*
	 * Uncomment to enable timer trigger on STANDARD TIMER.
	 *
	 * Set <TRIGGER_INDEX> to (timer_index - 1)
	 */
	//timer@<TRIGGER_INDEX> {
	//	status = "okay";
	//};

	/*
	 * Uncomment to enable timer trigger on LPTIMER only.
	 *
	 * Set <TRIGGER_INDEX> to (lptimer_index - 1)
	 */
	//trigger@<TRIGGER_INDEX> {
	//	status = "okay";
	//};
};

&uart5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_uart5_pins>;
	pinctrl-1 = <&ccmp25_uart5_sleep_pins>;
	status = "okay";

	/* USER CODE BEGIN uart5 */
	/delete-property/dmas;
	/delete-property/dma-names;
	/* USER CODE END uart5 */
};

&uart7 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_uart7_pins>;
	pinctrl-1 = <&ccmp25_uart7_sleep_pins>;
	status = "okay";

	/* USER CODE BEGIN uart7 */
	/delete-property/dmas;
	/delete-property/dma-names;
	uart-has-rtscts;
	/* USER CODE END uart7 */
};

&usart2 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ccmp25_usart2_pins>;
	pinctrl-1 = <&ccmp25_usart2_sleep_pins>;
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "okay";
};

&usb2_phy1 {
	status = "okay";
};

&usb2_phy2 {
	status = "okay";
};

&usb2h {
	status = "okay";
	
	/* USER CODE BEGIN usbh */
	usb2h_ohci: usb@482e0000 {
		status = "disabled";
	};
	/* USER CODE END usbh */
};

&usb3dr {
	status = "okay";
	
	/* USER CODE BEGIN usb3dr */
	//dwc3: usb@48300000 {
	//	maximum-speed = "high-speed";
	//	usb-role-switch;
	//	port {
	//		dwc3_ep: endpoint {
	//			remote-endpoint = <&typec_ep>;
	//		};
	//	};
	//};
	/* USER CODE END usb3dr */
};

&pinctrl {
	ccmp25_can1_pins: ccmp25-can1 {
		pins1 {
			pinmux = <STM32_PINMUX('G', 11,  AF7)>; /* FDCAN1_TX */
			drive-push-pull;
			bias-disable;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 12,  AF7)>; /* FDCAN1_RX */
			bias-disable;
		};
	};

	ccmp25_can1_sleep_pins: ccmp25-can1-sleep {
		pins {
			pinmux = <STM32_PINMUX('G', 11, ANALOG)>, /* FDCAN1_TX */
					 <STM32_PINMUX('G', 12, ANALOG)>; /* FDCAN1_RX */
		};
	};

	ccmp25_ethernet1_pins: ccmp25-ethernet1 {
		pins1 {
			pinmux = <STM32_PINMUX('F',  0, AF10)>; /* MDIO1_MDC */
			drive-push-pull;
			bias-disable;
			slew-rate = <2>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('F',  2, AF10)>; /* MDIO1_MDIO */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('A', 11, AF10)>, /* ETHERNET1_RX_DV */
					 <STM32_PINMUX('A', 14, AF10)>, /* ETHERNET1_RX_CLK */
					 <STM32_PINMUX('F',  1, AF10)>, /* ETHERNET1_RXD0 */
					 <STM32_PINMUX('C',  2, AF10)>, /* ETHERNET1_RXD1 */
					 <STM32_PINMUX('H', 12, AF10)>, /* ETHERNET1_RXD2 */
					 <STM32_PINMUX('H', 13, AF11)>; /* ETHERNET1_RXD3 */
			bias-disable;
		};
		pins4 {
			pinmux = <STM32_PINMUX('A', 13, AF10)>, /* ETHERNET1_TX_EN */
					 <STM32_PINMUX('C',  0, AF12)>, /* ETHERNET1_TXC */
					 <STM32_PINMUX('A', 15, AF10)>, /* ETHERNET1_TXD0 */
					 <STM32_PINMUX('C',  1, AF10)>, /* ETHERNET1_TXD1 */
					 <STM32_PINMUX('H', 10, AF10)>, /* ETHERNET1_TXD2 */
					 <STM32_PINMUX('H', 11, AF10)>, /* ETHERNET1_TXD3 */
					 <STM32_PINMUX('H',  9, AF10)>; /* ETHERNET1_REFCLK_125M */
			drive-push-pull;
			bias-disable;
			slew-rate = <3>;
		};
	};

	ccmp25_ethernet1_sleep_pins: ccmp25-ethernet1-sleep {
		pins {
			pinmux = <STM32_PINMUX('F',  0, ANALOG)>, /* MDIO1_MDC */
					 <STM32_PINMUX('F',  2, ANALOG)>, /* MDIO1_MDIO */
					 <STM32_PINMUX('A', 11, ANALOG)>, /* ETHERNET1_RX_DV */
					 <STM32_PINMUX('A', 14, ANALOG)>, /* ETHERNET1_RX_CLK */
					 <STM32_PINMUX('F',  1, ANALOG)>, /* ETHERNET1_RXD0 */
					 <STM32_PINMUX('C',  2, ANALOG)>, /* ETHERNET1_RXD1 */
					 <STM32_PINMUX('H', 12, ANALOG)>, /* ETHERNET1_RXD2 */
					 <STM32_PINMUX('H', 13, ANALOG)>, /* ETHERNET1_RXD3 */
					 <STM32_PINMUX('A', 13, ANALOG)>, /* ETHERNET1_TX_EN */
					 <STM32_PINMUX('C',  0, ANALOG)>, /* ETHERNET1_TXC */
					 <STM32_PINMUX('A', 15, ANALOG)>, /* ETHERNET1_TXD0 */
					 <STM32_PINMUX('C',  1, ANALOG)>, /* ETHERNET1_TXD1 */
					 <STM32_PINMUX('H', 10, ANALOG)>, /* ETHERNET1_TXD2 */
					 <STM32_PINMUX('H', 11, ANALOG)>, /* ETHERNET1_TXD3 */
					 <STM32_PINMUX('H',  9, ANALOG)>; /* ETHERNET1_REFCLK_125M */
		};
	};

	ccmp25_ethernet2_pins: ccmp25-ethernet2 {
		pins1 {
			pinmux = <STM32_PINMUX('C',  6, AF10)>; /* MDIO2_MDC */
			drive-push-pull;
			bias-disable;
			slew-rate = <2>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C',  5, AF10)>; /* MDIO2_MDIO */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('C',  3, AF10)>, /* ETHERNET2_RX_DV */
					 <STM32_PINMUX('F',  6, AF10)>, /* ETHERNET2_RX_CLK */
					 <STM32_PINMUX('G',  0, AF10)>, /* ETHERNET2_RXD0 */
					 <STM32_PINMUX('C', 12, AF10)>, /* ETHERNET2_RXD1 */
					 <STM32_PINMUX('F',  9, AF10)>, /* ETHERNET2_RXD2 */
					 <STM32_PINMUX('C', 11, AF10)>; /* ETHERNET2_RXD3 */
			bias-disable;
		};
		pins4 {
			pinmux = <STM32_PINMUX('C',  4, AF10)>, /* ETHERNET2_TX_EN */
					 <STM32_PINMUX('F',  7, AF10)>, /* ETHERNET2_TXC */
					 <STM32_PINMUX('C',  7, AF10)>, /* ETHERNET2_TXD0 */
					 <STM32_PINMUX('C',  8, AF10)>, /* ETHERNET2_TXD1 */
					 <STM32_PINMUX('C',  9, AF10)>, /* ETHERNET2_TXD2 */
					 <STM32_PINMUX('C', 10, AF10)>, /* ETHERNET2_TXD3 */
					 <STM32_PINMUX('F',  8, AF10)>; /* ETHERNET2_REFCLK_125M */
			drive-push-pull;
			bias-disable;
			slew-rate = <3>;
		};
	};

	ccmp25_ethernet2_sleep_pins: ccmp25-ethernet2-sleep {
		pins {
			pinmux = <STM32_PINMUX('C',  6, ANALOG)>, /* MDIO2_MDC */
					 <STM32_PINMUX('C',  5, ANALOG)>, /* MDIO2_MDIO */
					 <STM32_PINMUX('C',  3, ANALOG)>, /* ETHERNET2_RX_DV */
					 <STM32_PINMUX('F',  6, ANALOG)>, /* ETHERNET2_RX_CLK */
					 <STM32_PINMUX('G',  0, ANALOG)>, /* ETHERNET2_RXD0 */
					 <STM32_PINMUX('C', 12, ANALOG)>, /* ETHERNET2_RXD1 */
					 <STM32_PINMUX('F',  9, ANALOG)>, /* ETHERNET2_RXD2 */
					 <STM32_PINMUX('C', 11, ANALOG)>, /* ETHERNET2_RXD3 */
					 <STM32_PINMUX('C',  4, ANALOG)>, /* ETHERNET2_TX_EN */
					 <STM32_PINMUX('F',  7, ANALOG)>, /* ETHERNET2_TXC */
					 <STM32_PINMUX('C',  7, ANALOG)>, /* ETHERNET2_TXD0 */
					 <STM32_PINMUX('C',  8, ANALOG)>, /* ETHERNET2_TXD1 */
					 <STM32_PINMUX('C',  9, ANALOG)>, /* ETHERNET2_TXD2 */
					 <STM32_PINMUX('C', 10, ANALOG)>, /* ETHERNET2_TXD3 */
					 <STM32_PINMUX('F',  8, ANALOG)>; /* ETHERNET2_REFCLK_125M */
		};
	};

	ccmp25_gpio_pins: ccmp25-gpio {
		pins1 {
			pinmux = <STM32_PINMUX('B',  2, GPIO)>, /* ETH1_RST_GPIO */
					 <STM32_PINMUX('G',  6, GPIO)>, /* ETH2_RST_GPIO */
					 <STM32_PINMUX('H',  2, GPIO)>, /* PH2_GPIO */
					 <STM32_PINMUX('A',  3, GPIO)>, /* PA3_GPIO */
					 <STM32_PINMUX('A',  6, GPIO)>, /* PA6_GPIO */
					 <STM32_PINMUX('A',  7, GPIO)>, /* PA7_GPIO */
					 <STM32_PINMUX('H',  6, GPIO)>, /* PH6_GPIO */
					 <STM32_PINMUX('H',  3, GPIO)>, /* PH3_GPIO */
					 <STM32_PINMUX('A',  5, GPIO)>, /* PA5_GPIO */
					 <STM32_PINMUX('A',  2, GPIO)>, /* PA2_GPIO */
					 <STM32_PINMUX('A',  9, GPIO)>, /* PA9_GPIO */
					 <STM32_PINMUX('A', 10, GPIO)>, /* PA10_GPIO */
					 <STM32_PINMUX('H',  7, GPIO)>, /* PH7_GPIO */
					 <STM32_PINMUX('H',  8, GPIO)>, /* PH8_GPIO */
					 <STM32_PINMUX('B',  6, GPIO)>, /* PB6_GPIO */
					 <STM32_PINMUX('D', 11, GPIO)>, /* SDMMC1_D4_GPIO */
					 <STM32_PINMUX('F', 10, GPIO)>, /* PF10_GPIO */
					 <STM32_PINMUX('F', 14, GPIO)>, /* USART6_RX_GPIO */
					 <STM32_PINMUX('I',  0, GPIO)>, /* SAI4_MCLK_B_GPIO */
					 <STM32_PINMUX('G',  3, GPIO)>, /* PG3_GPIO */
					 <STM32_PINMUX('D',  5, GPIO)>, /* PD5_GPIO */
					 <STM32_PINMUX('D',  4, GPIO)>, /* PD4_GPIO */
					 <STM32_PINMUX('I',  6, GPIO)>, /* PI6_GPIO */
					 <STM32_PINMUX('I',  9, GPIO)>, /* PI9_GPIO */
					 <STM32_PINMUX('I',  5, GPIO)>, /* UART5_CTS_GPIO */
					 <STM32_PINMUX('B',  3, GPIO)>, /* PB3_GPIO */
					 <STM32_PINMUX('A', 12, GPIO)>, /* PA12_GPIO */
					 <STM32_PINMUX('G', 10, GPIO)>, /* UART5_RX_GPIO */
					 <STM32_PINMUX('I',  8, GPIO)>, /* PI8/LPO32_GPIO */
					 <STM32_PINMUX('G',  4, GPIO)>, /* PG4_GPIO */
					 <STM32_PINMUX('F',  5, GPIO)>; /* PF5_GPIO */
			bias-disable;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G',  7, GPIO)>; /* PG7_GPIO */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_gpio_sleep_pins: ccmp25-gpio-sleep {
		pins {
			pinmux = <STM32_PINMUX('B',  2, ANALOG)>, /* ETH1_RST_GPIO */
					 <STM32_PINMUX('G',  6, ANALOG)>, /* ETH2_RST_GPIO */
					 <STM32_PINMUX('H',  2, ANALOG)>, /* PH2_GPIO */
					 <STM32_PINMUX('A',  3, ANALOG)>, /* PA3_GPIO */
					 <STM32_PINMUX('A',  6, ANALOG)>, /* PA6_GPIO */
					 <STM32_PINMUX('A',  7, ANALOG)>, /* PA7_GPIO */
					 <STM32_PINMUX('H',  6, ANALOG)>, /* PH6_GPIO */
					 <STM32_PINMUX('H',  3, ANALOG)>, /* PH3_GPIO */
					 <STM32_PINMUX('A',  5, ANALOG)>, /* PA5_GPIO */
					 <STM32_PINMUX('A',  2, ANALOG)>, /* PA2_GPIO */
					 <STM32_PINMUX('A',  9, ANALOG)>, /* PA9_GPIO */
					 <STM32_PINMUX('A', 10, ANALOG)>, /* PA10_GPIO */
					 <STM32_PINMUX('H',  7, ANALOG)>, /* PH7_GPIO */
					 <STM32_PINMUX('H',  8, ANALOG)>, /* PH8_GPIO */
					 <STM32_PINMUX('B',  6, ANALOG)>, /* PB6_GPIO */
					 <STM32_PINMUX('D', 11, ANALOG)>, /* SDMMC1_D4_GPIO */
					 <STM32_PINMUX('F', 10, ANALOG)>, /* PF10_GPIO */
					 <STM32_PINMUX('G',  7, ANALOG)>, /* PG7_GPIO */
					 <STM32_PINMUX('F', 14, ANALOG)>, /* USART6_RX_GPIO */
					 <STM32_PINMUX('I',  0, ANALOG)>, /* SAI4_MCLK_B_GPIO */
					 <STM32_PINMUX('G',  3, ANALOG)>, /* PG3_GPIO */
					 <STM32_PINMUX('D',  5, ANALOG)>, /* PD5_GPIO */
					 <STM32_PINMUX('D',  4, ANALOG)>, /* PD4_GPIO */
					 <STM32_PINMUX('I',  6, ANALOG)>, /* PI6_GPIO */
					 <STM32_PINMUX('I',  9, ANALOG)>, /* PI9_GPIO */
					 <STM32_PINMUX('I',  5, ANALOG)>, /* UART5_CTS_GPIO */
					 <STM32_PINMUX('B',  3, ANALOG)>, /* PB3_GPIO */
					 <STM32_PINMUX('A', 12, ANALOG)>, /* PA12_GPIO */
					 <STM32_PINMUX('G', 10, ANALOG)>, /* UART5_RX_GPIO */
					 <STM32_PINMUX('I',  8, ANALOG)>, /* PI8/LPO32_GPIO */
					 <STM32_PINMUX('G',  4, ANALOG)>, /* PG4_GPIO */
					 <STM32_PINMUX('F',  5, ANALOG)>; /* PF5_GPIO */
		};
	};

	ccmp25_i2c1_pins: ccmp25-i2c1 {
		pins {
			pinmux = <STM32_PINMUX('G', 13,  AF9)>, /* I2C1_SCL */
					 <STM32_PINMUX('I',  1,  AF9)>; /* I2C1_SDA */
			drive-open-drain;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_i2c1_sleep_pins: ccmp25-i2c1-sleep {
		pins {
			pinmux = <STM32_PINMUX('G', 13, ANALOG)>, /* I2C1_SCL */
					 <STM32_PINMUX('I',  1, ANALOG)>; /* I2C1_SDA */
		};
	};

	ccmp25_i2c2_pins: ccmp25-i2c2 {
		pins {
			pinmux = <STM32_PINMUX('B',  5,  AF9)>, /* I2C2_SCL */
					 <STM32_PINMUX('B',  4,  AF9)>; /* I2C2_SDA */
			drive-open-drain;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_i2c2_sleep_pins: ccmp25-i2c2-sleep {
		pins {
			pinmux = <STM32_PINMUX('B',  5, ANALOG)>, /* I2C2_SCL */
					 <STM32_PINMUX('B',  4, ANALOG)>; /* I2C2_SDA */
		};
	};

	ccmp25_sdmmc3_pins: ccmp25-sdmmc3 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 13, AF10)>; /* SDMMC3_CLK */
			drive-push-pull;
			bias-disable;
			slew-rate = <3>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 12, AF10)>, /* SDMMC3_CMD */
					 <STM32_PINMUX('B', 14, AF10)>, /* SDMMC3_D0 */
					 <STM32_PINMUX('D', 13, AF10)>, /* SDMMC3_D1 */
					 <STM32_PINMUX('B', 12, AF10)>, /* SDMMC3_D2 */
					 <STM32_PINMUX('I', 11, AF10)>; /* SDMMC3_D3 */
			drive-push-pull;
			bias-disable;
			slew-rate = <2>;
		};
	};

	ccmp25_sdmmc3_sleep_pins: ccmp25-sdmmc3-sleep {
		pins {
			pinmux = <STM32_PINMUX('B', 13, ANALOG)>, /* SDMMC3_CLK */
					 <STM32_PINMUX('D', 12, ANALOG)>, /* SDMMC3_CMD */
					 <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC3_D0 */
					 <STM32_PINMUX('D', 13, ANALOG)>, /* SDMMC3_D1 */
					 <STM32_PINMUX('B', 12, ANALOG)>, /* SDMMC3_D2 */
					 <STM32_PINMUX('I', 11, ANALOG)>; /* SDMMC3_D3 */
		};
	};

	ccmp25_spi3_pins: ccmp25-spi3 {
		pins1 {
			pinmux = <STM32_PINMUX('B',  8,  AF1)>, /* SPI3_MOSI */
					 <STM32_PINMUX('B',  7,  AF3)>; /* SPI3_SCK */
			drive-push-pull;
			bias-disable;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 10,  AF3)>, /* SPI3_MISO */
					 <STM32_PINMUX('B',  1,  AF3)>; /* SPI3_NSS */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_spi3_sleep_pins: ccmp25-spi3-sleep {
		pins {
			pinmux = <STM32_PINMUX('B',  8, ANALOG)>, /* SPI3_MOSI */
					 <STM32_PINMUX('B', 10, ANALOG)>, /* SPI3_MISO */
					 <STM32_PINMUX('B',  7, ANALOG)>, /* SPI3_SCK */
					 <STM32_PINMUX('B',  1, ANALOG)>; /* SPI3_NSS */
		};
	};

	ccmp25_timers1_ch1_pwm_pins: ccmp25-timers1-ch1-pwm {
		pins {
			pinmux = <STM32_PINMUX('D',  7,  AF8)>; /* TIM1_CH1_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers1_ch1_pwm_sleep_pins: ccmp25-timers1-ch1-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('D',  7, ANALOG)>; /* TIM1_CH1_PWM */
		};
	};

	ccmp25_timers1_ch2_pwm_pins: ccmp25-timers1-ch2-pwm {
		pins {
			pinmux = <STM32_PINMUX('D', 10,  AF8)>; /* TIM1_CH2_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers1_ch2_pwm_sleep_pins: ccmp25-timers1-ch2-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('D', 10, ANALOG)>; /* TIM1_CH2_PWM */
		};
	};

	ccmp25_timers1_ch3_4_pins: ccmp25-timers1-ch3_4 {
		pins {
			pinmux = <STM32_PINMUX('D',  9,  AF8)>; /* TIM1_CH3_PWM */
            pinmux = <STM32_PINMUX('D',  8,  AF8)>; /* TIM1_CH4_PWM */
			bias-disable;
		};
	};

	ccmp25_timers1_ch3_4_sleep_pins: ccmp25-timers1-ch3_4 {
		pins {
			pinmux = <STM32_PINMUX('D',  9, ANALOG)>; /* TIM1_CH3_PWM */
            pinmux = <STM32_PINMUX('D',  8, ANALOG)>; /* TIM1_CH4_PWM */
		};
	};
	

	ccmp25_timers20_ch4_pwm_pins: ccmp25-timers20-ch4-pwm {
		pins {
			pinmux = <STM32_PINMUX('B',  0,  AF8)>; /* TIM20_CH4_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers20_ch4_pwm_sleep_pins: ccmp25-timers20-ch4-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('B',  0, ANALOG)>; /* TIM20_CH4_PWM */
		};
	};

	ccmp25_timers2_ch1_pwm_pins: ccmp25-timers2-ch1-pwm {
		pins {
			pinmux = <STM32_PINMUX('H',  5,  AF7)>; /* TIM2_CH1_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers2_ch1_pwm_sleep_pins: ccmp25-timers2-ch1-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('H',  5, ANALOG)>; /* TIM2_CH1_PWM */
		};
	};

	ccmp25_timers2_ch2_pwm_pins: ccmp25-timers2-ch2-pwm {
		pins {
			pinmux = <STM32_PINMUX('F', 15,  AF8)>; /* TIM2_CH2_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers2_ch2_pwm_sleep_pins: ccmp25-timers2-ch2-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('F', 15, ANALOG)>; /* TIM2_CH2_PWM */
		};
	};

	ccmp25_timers1_ch3_4_pins: ccmp25-timers1-ch3_4 {
		pins {
			pinmux = <STM32_PINMUX('G',  5,  AF8)>; /* TIM1_CH3_PWM */
            pinmux = <STM32_PINMUX('F',  11,  AF8)>; /* TIM1_CH4_PWM */
			bias-disable;
		};
	};

	ccmp25_timers1_ch3_4_sleep_pins: ccmp25-timers1-ch3_4 {
		pins {
			pinmux = <STM32_PINMUX('G',  5, ANALOG)>; /* TIM1_CH3_PWM */
            pinmux = <STM32_PINMUX('F',  11, ANALOG)>; /* TIM1_CH4_PWM */
		};
	};


	ccmp25_timers3_ch3_pwm_pins: ccmp25-timers3-ch3-pwm {
		pins {
			pinmux = <STM32_PINMUX('F', 13,  AF8)>; /* TIM3_CH3_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers3_ch3_pwm_sleep_pins: ccmp25-timers3-ch3-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('F', 13, ANALOG)>; /* TIM3_CH3_PWM */
		};
	};

	ccmp25_timers3_ch4_pwm_pins: ccmp25-timers3-ch4-pwm {
		pins {
			pinmux = <STM32_PINMUX('F',  3,  AF7)>; /* TIM3_CH4_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers3_ch4_pwm_sleep_pins: ccmp25-timers3-ch4-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('F',  3, ANALOG)>; /* TIM3_CH4_PWM */
		};
	};

	ccmp25_timers4_ch1_pwm_pins: ccmp25-timers4-ch1-pwm {
		pins {
			pinmux = <STM32_PINMUX('I', 10,  AF8)>; /* TIM4_CH1_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers4_ch1_pwm_sleep_pins: ccmp25-timers4-ch1-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('I', 10, ANALOG)>; /* TIM4_CH1_PWM */
		};
	};

	ccmp25_timers4_ch2_pwm_pins: ccmp25-timers4-ch2-pwm {
		pins {
			pinmux = <STM32_PINMUX('A',  1,  AF9)>; /* TIM4_CH2_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers4_ch2_pwm_sleep_pins: ccmp25-timers4-ch2-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('A',  1, ANALOG)>; /* TIM4_CH2_PWM */
		};
	};

	ccmp25_timers4_ch3_pwm_pins: ccmp25-timers4-ch3-pwm {
		pins {
			pinmux = <STM32_PINMUX('D',  6,  AF9)>; /* TIM4_CH3_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers4_ch3_pwm_sleep_pins: ccmp25-timers4-ch3-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('D',  6, ANALOG)>; /* TIM4_CH3_PWM */
		};
	};

	ccmp25_timers4_ch4_pwm_pins: ccmp25-timers4-ch4-pwm {
		pins {
			pinmux = <STM32_PINMUX('F',  4,  AF9)>; /* TIM4_CH4_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers4_ch4_pwm_sleep_pins: ccmp25-timers4-ch4-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('F',  4, ANALOG)>; /* TIM4_CH4_PWM */
		};
	};

	ccmp25_timers5_ch1_pwm_pins: ccmp25-timers5-ch1-pwm {
		pins {
			pinmux = <STM32_PINMUX('F', 12,  AF8)>; /* TIM5_CH1_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers5_ch1_pwm_sleep_pins: ccmp25-timers5-ch1-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('F', 12, ANALOG)>; /* TIM5_CH1_PWM */
		};
	};

	ccmp25_timers5_ch2_pwm_pins: ccmp25-timers5-ch2-pwm {
		pins {
			pinmux = <STM32_PINMUX('H',  4,  AF9)>; /* TIM5_CH2_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers5_ch2_pwm_sleep_pins: ccmp25-timers5-ch2-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('H',  4, ANALOG)>; /* TIM5_CH2_PWM */
		};
	};

	ccmp25_timers5_ch3_pwm_pins: ccmp25-timers5-ch3-pwm {
		pins {
			pinmux = <STM32_PINMUX('G',  2,  AF9)>; /* TIM5_CH3_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers5_ch3_pwm_sleep_pins: ccmp25-timers5-ch3-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('G',  2, ANALOG)>; /* TIM5_CH3_PWM */
		};
	};

	ccmp25_timers5_ch4_pwm_pins: ccmp25-timers5-ch4-pwm {
		pins {
			pinmux = <STM32_PINMUX('G',  1,  AF9)>; /* TIM5_CH4_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers5_ch4_pwm_sleep_pins: ccmp25-timers5-ch4-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('G',  1, ANALOG)>; /* TIM5_CH4_PWM */
		};
	};

	ccmp25_timers8_ch1_pwm_pins: ccmp25-timers8-ch1-pwm {
		pins {
			pinmux = <STM32_PINMUX('I',  2,  AF8)>; /* TIM8_CH1_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers8_ch1_pwm_sleep_pins: ccmp25-timers8-ch1-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('I',  2, ANALOG)>; /* TIM8_CH1_PWM */
		};
	};

	ccmp25_timers8_ch2_pwm_pins: ccmp25-timers8-ch2-pwm {
		pins {
			pinmux = <STM32_PINMUX('I',  3,  AF8)>; /* TIM8_CH2_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers8_ch2_pwm_sleep_pins: ccmp25-timers8-ch2-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('I',  3, ANALOG)>; /* TIM8_CH2_PWM */
		};
	};

	ccmp25_timers8_ch3_pwm_pins: ccmp25-timers8-ch3-pwm {
		pins {
			pinmux = <STM32_PINMUX('I',  4,  AF8)>; /* TIM8_CH3_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_timers8_ch3_pwm_sleep_pins: ccmp25-timers8-ch3-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('I',  4, ANALOG)>; /* TIM8_CH3_PWM */
		};
	};

	ccmp25_uart5_pins: ccmp25-uart5 {
		pins1 {
			pinmux = <STM32_PINMUX('G',  9,  AF5)>, /* UART5_TX */
					 <STM32_PINMUX('G',  8,  AF5)>; /* UART5_DE */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 15,  AF5)>; /* UART5_RX */
			bias-disable;
		};
	};

	ccmp25_uart5_sleep_pins: ccmp25-uart5-sleep {
		pins {
			pinmux = <STM32_PINMUX('G',  9, ANALOG)>, /* UART5_TX */
					 <STM32_PINMUX('B', 15, ANALOG)>, /* UART5_RX */
					 <STM32_PINMUX('G',  8, ANALOG)>; /* UART5_DE */
		};
	};

	ccmp25_uart7_pins: ccmp25-uart7 {
		pins1 {
			pinmux = <STM32_PINMUX('D',  3,  AF6)>, /* UART7_TX */
					 <STM32_PINMUX('D',  1,  AF6)>; /* UART7_RTS */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D',  0,  AF6)>, /* UART7_RX */
					 <STM32_PINMUX('D',  2,  AF6)>; /* UART7_CTS */
			bias-disable;
		};
	};

	ccmp25_uart7_sleep_pins: ccmp25-uart7-sleep {
		pins {
			pinmux = <STM32_PINMUX('D',  3, ANALOG)>, /* UART7_TX */
					 <STM32_PINMUX('D',  0, ANALOG)>, /* UART7_RX */
					 <STM32_PINMUX('D',  1, ANALOG)>, /* UART7_RTS */
					 <STM32_PINMUX('D',  2, ANALOG)>; /* UART7_CTS */
		};
	};

	ccmp25_usart2_pins: ccmp25-usart2 {
		pins1 {
			pinmux = <STM32_PINMUX('A',  8,  AF8)>; /* USART2_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A',  4,  AF6)>; /* USART2_TX */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_usart2_sleep_pins: ccmp25-usart-sleep-2 {
		pins {
			pinmux = <STM32_PINMUX('A',  8, ANALOG)>, /* USART2_RX */
					 <STM32_PINMUX('A',  4, ANALOG)>; /* USART2_TX */
		};
	};
};

&pinctrl_z {
	ccmp25_gpio_z_pins: ccmp25-gpio {
		pins {
			pinmux = <STM32_PINMUX('Z',  6, GPIO)>, /* 3V3_RF_EN/PZ6_GPIO */
					 <STM32_PINMUX('Z',  9, GPIO)>, /* PZ9_GPIO */
					 <STM32_PINMUX('Z',  8, GPIO)>, /* PZ8_GPIO */
					 <STM32_PINMUX('Z',  1, GPIO)>, /* PZ1_GPIO */
					 <STM32_PINMUX('Z',  0, GPIO)>, /* PZ0_GPIO */
					 <STM32_PINMUX('Z',  4, GPIO)>, /* PZ4_GPIO */
					 <STM32_PINMUX('Z',  3, GPIO)>; /* PZ3_GPIO */
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_gpio_z_sleep_pins: ccmp25-gpio-sleep {
		pins {
			pinmux = <STM32_PINMUX('Z',  6, ANALOG)>, /* 3V3_RF_EN/PZ6_GPIO */
					 <STM32_PINMUX('Z',  9, ANALOG)>, /* PZ9_GPIO */
					 <STM32_PINMUX('Z',  8, ANALOG)>, /* PZ8_GPIO */
					 <STM32_PINMUX('Z',  1, ANALOG)>, /* PZ1_GPIO */
					 <STM32_PINMUX('Z',  0, ANALOG)>, /* PZ0_GPIO */
					 <STM32_PINMUX('Z',  4, ANALOG)>, /* PZ4_GPIO */
					 <STM32_PINMUX('Z',  3, ANALOG)>; /* PZ3_GPIO */
		};
	};

	ccmp25_lptimer3_pwm_z_pins: ccmp25-lptimer3-pwm {
		pins {
			pinmux = <STM32_PINMUX('Z',  2,  AF2)>, /* LPTIM3_CH1_PWM */
					 <STM32_PINMUX('Z',  7, AF10)>; /* LPTIM3_CH2_PWM */
			drive-push-pull;
			bias-disable;
			slew-rate = <0>;
		};
	};

	ccmp25_lptimer3_pwm_z_sleep_pins: ccmp25-lptimer3-pwm-sleep {
		pins {
			pinmux = <STM32_PINMUX('Z',  2, ANALOG)>, /* LPTIM3_CH1_PWM */
					 <STM32_PINMUX('Z',  7, ANALOG)>; /* LPTIM3_CH2_PWM */
		};
	};
};